{"version":3,"sources":["components/PatientsTable/PatientsTable.jsx","components/Tabs/Tabs.jsx","components/TabView/TabView.jsx","constants/index.js","redux/selectors/appSelectors.js","api/api.js","components/TabView/TabViewContainer.jsx","redux/thunks/index.js","redux/actions/index.js","redux/actions/actionTypes.js","components/PatientInfo/PatientInfo.jsx","utils/index.js","components/PatientInfo/PatientInfoContainer.jsx","components/Main/Main.jsx","components/Main/MainContainer.jsx","App.js","serviceWorker.js","redux/reducers/appReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Header","data","className","map","item","key","id","name","Body","headerData","activeTabIndex","setActivePatient","activePatient","patient","patientIndex","isActive","historyNumber","onClick","headerItem","columnIndex","cellValue","lastName","firstName","patrName","bedNumber","cause","PatientsTable","present","quitting","tableHeaderData","Tabs","tabsData","setActiveTabIndex","presentCount","quittingCount","tabs","index","countPatients","TabView","props","havePresent","undefined","haveQuitting","length","appSelectors","getActivePatient","state","app","getCollapseMode","collapseMode","getPresentPatients","presentPatients","getQuittingPatients","quittingPatients","instance","axios","baseURL","get","then","response","error","console","log","mapDispatchToProps","fetchPresentPatients","dispatch","a","async","api","type","fetchQuittingPatients","connect","useState","useEffect","InfoItem","value","PatientInfo","birthDate","hidden","fio","age","diagnosis","Date","getTime","style","display","setCollapseMode","collapse","Main","leftElemRef","leftElemWidth","onMouseDown","onMouseUp","onMouseMove","ref","maxWidth","MainContainer","startLeftElemWidth","setStartLeftElemWidth","setLeftElemWidth","oldMouseX","setOldMouseX","leftElem","useRef","current","offsetWidth","collapseModeHandler","e","pageX","App","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","mode","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45ad9a44.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PatientsTable.scss';\r\n\r\nconst PatientsTable = ({ present, quitting, tableHeaderData, activeTabIndex, setActivePatient, activePatient }) => {\r\n  let data;\r\n  let headerData;\r\n  switch (activeTabIndex) {\r\n    case 0:\r\n      data = present;\r\n      headerData = tableHeaderData[0];\r\n      break;\r\n    case 1:\r\n      data = quitting;\r\n      headerData = tableHeaderData[1];\r\n      break;\r\n    default:\r\n      data = null;\r\n      headerData = null;\r\n  }\r\n\r\n  if (!data || data === null || headerData === null) {\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"patients-table\">\r\n      <table className=\"table\">\r\n        <Header data={headerData} />\r\n        <Body\r\n          data={data}\r\n          headerData={headerData}\r\n          activeTabIndex={activeTabIndex}\r\n          activePatient={activePatient}\r\n          setActivePatient={setActivePatient}\r\n        />\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Header = ({ data }) => {\r\n  return (\r\n    <thead className=\"table-header\">\r\n      <tr>\r\n        {data.data.map(item => (\r\n          <th key={item.id}>{item.name}</th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nconst Body = ({ data, headerData, activeTabIndex, setActivePatient, activePatient }) => {\r\n  return (\r\n    <tbody className=\"body\">\r\n      {data.map((patient, patientIndex) => {\r\n        const isActive = activePatient === patient;\r\n        return (\r\n          <tr\r\n            key={patient.historyNumber}\r\n            className={isActive ? 'row_active' : ''}\r\n            onClick={() => setActivePatient(patient)}\r\n          >\r\n            {headerData.data.map((headerItem, columnIndex) => {\r\n              let cellValue;\r\n              switch (columnIndex) {\r\n                case 0:\r\n                  cellValue = patient.historyNumber;\r\n                  break;\r\n                case 1:\r\n                  cellValue = `${patient.lastName} ${patient.firstName} ${patient.patrName}`;\r\n                  break;\r\n                case 2:\r\n                  switch (activeTabIndex) {\r\n                    case 0:\r\n                      cellValue = patient.bedNumber;\r\n                      break;\r\n                    case 1:\r\n                      cellValue = patient.cause;\r\n                      break;\r\n                    default:\r\n                      cellValue = 'null';\r\n                  }\r\n                  break;\r\n                default:\r\n                  cellValue = 'null';\r\n              }\r\n\r\n              return <td key={columnIndex}>{cellValue}</td>;\r\n            })}\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default PatientsTable;\r\n","import React from 'react';\r\nimport './Tabs.scss';\r\n\r\nconst Tabs = ({ tabsData, activeTabIndex, setActiveTabIndex, presentCount, quittingCount }) => {\r\n  const changeTab = newIndex => {\r\n    setActiveTabIndex(newIndex);\r\n  };\r\n\r\n  let tabs = tabsData.map((item, index) => {\r\n    let isActive = index === activeTabIndex;\r\n\r\n    let countPatients = 0;\r\n    switch (index) {\r\n      case 1:\r\n        countPatients = quittingCount;\r\n        break;\r\n      default:\r\n        countPatients = presentCount;\r\n    }\r\n\r\n    return (\r\n      <button key={item.id} className={`tabItem ${isActive ? 'tabItem_active' : ''}`} onClick={() => changeTab(index)}>\r\n        {item.name}({countPatients})\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div className=\"tabs\">{tabs}</div>;\r\n};\r\n\r\nexport default Tabs;\r\n","import React from 'react';\r\nimport './TabView.scss';\r\n\r\nimport PatientsTable from '../PatientsTable/PatientsTable';\r\nimport Tabs from '../Tabs/Tabs';\r\n\r\nconst TabView = ({ present, quitting, activeTabIndex, tableHeaderData, setActivePatient, activePatient, ...props }) => {\r\n  const havePresent = present !== null && present !== undefined;\r\n  const haveQuitting = quitting !== null && quitting !== undefined;\r\n\r\n  return (\r\n    <div className=\"tabView\">\r\n      <Tabs\r\n        {...props}\r\n        activeTabIndex={activeTabIndex}\r\n        presentCount={havePresent ? present.length : 0}\r\n        quittingCount={haveQuitting ? quitting.length : 0}\r\n      />\r\n      <PatientsTable\r\n        present={present}\r\n        quitting={quitting}\r\n        tableHeaderData={tableHeaderData}\r\n        activeTabIndex={activeTabIndex}\r\n        activePatient={activePatient}\r\n        setActivePatient={setActivePatient}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabView;\r\n","export const tabsData = [{\r\n    id: 0,\r\n    name: 'Присутствуют'\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'Выбывшие'\r\n  },\r\n];\r\n\r\nexport const tableHeaderData = [{\r\n    id: 0,\r\n    data: [{\r\n        id: 0,\r\n        name: '№ ИБ'\r\n      },\r\n      {\r\n        id: 1,\r\n        name: 'ФИО'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Палата'\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: 1,\r\n    data: [{\r\n        id: 0,\r\n        name: '№ ИБ'\r\n      },\r\n      {\r\n        id: 1,\r\n        name: 'ФИО'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Причина выбытия'\r\n      },\r\n    ],\r\n  },\r\n];","const getActivePatient = (state) => {\r\n  return state.app.activePatient;\r\n};\r\n\r\nconst getCollapseMode = (state) => {\r\n  return state.app.collapseMode;\r\n};\r\n\r\nconst getPresentPatients = (state) => {\r\n  return state.app.presentPatients;\r\n};\r\n\r\nconst getQuittingPatients = (state) => {\r\n  return state.app.quittingPatients;\r\n};\r\n\r\nconst appSelectors = {\r\n  getActivePatient,\r\n  getCollapseMode,\r\n  getPresentPatients,\r\n  getQuittingPatients\r\n};\r\n\r\nexport default appSelectors;","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://my-json-server.typicode.com/PlebeyRisk/test-server/',\r\n});\r\n\r\nconst getPresent = () => {\r\n  return instance.get(`present`).then(\r\n    response => response.data,\r\n    error => console.log('error fetching getPresent(): ' + error),\r\n  );\r\n};\r\n\r\nconst getQuitting = () => {\r\n  return instance.get(`quitting`).then(\r\n    response => response.data,\r\n    error => console.log('error fetching getQuitting(): ' + error),\r\n  );\r\n};\r\n\r\nexport default {\r\n  getQuitting,\r\n  getPresent\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport TabView from './TabView';\r\n\r\nimport { tabsData, tableHeaderData } from '../../constants';\r\nimport appSelectors from '../../redux/selectors/appSelectors';\r\nimport { fetchPresentPatients, fetchQuittingPatients } from '../../redux/thunks';\r\nimport { setActivePatient } from '../../redux/actions';\r\n\r\nconst TabViewContainer = ({\r\n  fetchPresentPatients,\r\n  fetchQuittingPatients,\r\n  setActivePatient,\r\n  activePatient,\r\n  present,\r\n  quitting,\r\n}) => {\r\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetchPresentPatients();\r\n    fetchQuittingPatients();\r\n  }, []);\r\n\r\n  return (\r\n    <TabView\r\n      tabsData={tabsData}\r\n      tableHeaderData={tableHeaderData}\r\n      activeTabIndex={activeTabIndex}\r\n      setActiveTabIndex={setActiveTabIndex}\r\n      present={present}\r\n      quitting={quitting}\r\n      activePatient={activePatient}\r\n      setActivePatient={setActivePatient}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = state => {\r\n  const { getActivePatient, getPresentPatients, getQuittingPatients } = appSelectors;\r\n  return {\r\n    activePatient: getActivePatient(state),\r\n    present: getPresentPatients(state),\r\n    quitting: getQuittingPatients(state),\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = {\r\n  fetchPresentPatients,\r\n  fetchQuittingPatients,\r\n  setActivePatient,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TabViewContainer);\r\n","import api from \"../../api/api\";\r\nimport { setPresentPatients, setQuittingPatients } from \"../actions\";\r\n\r\nexport const fetchPresentPatients = () => async dispatch => {\r\n  const response = await api.getPresent();\r\n\r\n  if (response) {\r\n    dispatch(setPresentPatients(response));\r\n  }\r\n};\r\n\r\nexport const fetchQuittingPatients = () => async dispatch => {\r\n  const response = await api.getQuitting();\r\n\r\n  if (response) {\r\n    dispatch(setQuittingPatients(response));\r\n  }\r\n};\r\n\r\n","import {\r\n  SET_ACTIVE_PATIENT,\r\n  SET_COLLAPSE_MODE,\r\n  SET_PRESENT_PATIENTS,\r\n  SET_QUITTING_PATIENTS } from './actionTypes';\r\n\r\nexport const setActivePatient = (patient) => ({type: SET_ACTIVE_PATIENT, patient});\r\nexport const setCollapseMode = (mode) => ({type: SET_COLLAPSE_MODE, mode});\r\nexport const setPresentPatients = (present) => ({type: SET_PRESENT_PATIENTS, present});\r\nexport const setQuittingPatients = (quitting) => ({type: SET_QUITTING_PATIENTS, quitting});\r\n\r\n","export const SET_ACTIVE_PATIENT = 'app/SET_ACTIVE_PATIENT';\r\nexport const SET_COLLAPSE_MODE = 'app/SET_COLLAPSE_MODE';\r\nexport const SET_PRESENT_PATIENTS = 'app/SET_PRESENT_PATIENTS';\r\nexport const SET_QUITTING_PATIENTS = 'app/SET_QUITTING_PATIENTS';","import React from 'react';\r\nimport './PatientInfo.scss';\r\n\r\nimport { getFullYear } from '../../utils';\r\n\r\nconst PatientInfo = ({ data, hidden = false }) => {\r\n  let fio = null;\r\n  let age = null;\r\n  let diagnosis = null;\r\n\r\n  if (data) {\r\n    fio = `${data.lastName} ${data.firstName} ${data.patrName}`;\r\n    age = getFullYear(data.birthDate);\r\n    diagnosis = data.diagnosis;\r\n  }\r\n\r\n  return (\r\n    <div className=\"patientInfo\" style={hidden ? { display: 'none' } : {}}>\r\n      <div className=\"patientInfo-header\">\r\n        <span className=\"patientInfo__title\">Информация о пациенте</span>\r\n      </div>\r\n      <div className=\"patientInfo-body\">\r\n        <InfoItem name=\"ФИО\" value={fio} />\r\n        <InfoItem name=\"Возраст\" value={age} />\r\n        <InfoItem name=\"Диагноз\" value={diagnosis} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst InfoItem = ({ name, value }) => {\r\n  return (\r\n    <div className=\"infoItem\">\r\n      <span className=\"infoItem__name\">{name}</span>\r\n      <div className=\"infoItem__value\">{value}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientInfo;\r\n","export const getFullYear = birthDate => {\r\n  return ((new Date().getTime() - new Date(birthDate)) / (24 * 3600 * 365.25 * 1000)) | 0;\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PatientInfo from './PatientInfo';\r\n\r\nimport appSelectors from '../../redux/selectors/appSelectors';\r\n\r\nconst PatientInfoContainer = ({ activePatient, setCollapseMode, collapse = false, hidden = false }) => {\r\n  return <PatientInfo data={activePatient} collapse={collapse} setCollapseMode={setCollapseMode} hidden={hidden} />;\r\n};\r\n\r\nlet mapStateToProps = state => {\r\n  const { getActivePatient } = appSelectors;\r\n  return {\r\n    activePatient: getActivePatient(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PatientInfoContainer);\r\n","import React from 'react';\r\nimport './Main.scss';\r\n\r\nimport TabViewContainer from '../TabView/TabViewContainer';\r\nimport PatientInfoContainer from '../PatientInfo/PatientInfoContainer';\r\n\r\nconst Main = ({ leftElemRef, leftElemWidth, collapseMode, setCollapseMode, onMouseDown, onMouseUp, onMouseMove }) => {\r\n  const toggleCollapseMode = () => {\r\n    setCollapseMode(!collapseMode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\" onMouseUp={onMouseUp} onMouseMove={onMouseMove}>\r\n      <div\r\n        ref={leftElemRef}\r\n        className={`leftBlock${collapseMode ? ' _collapse' : ''}`}\r\n        style={!leftElemWidth ? {} : { maxWidth: leftElemWidth + 'px' }}\r\n      >\r\n        <PatientInfoContainer setCollapseMode={setCollapseMode} collapse={collapseMode} hidden={collapseMode} />\r\n        <button className=\"collapseButton\" onClick={toggleCollapseMode}>\r\n          <span className=\"collapseButton__icon\"></span>\r\n        </button>\r\n      </div>\r\n      <button className=\"slider\" onMouseDown={onMouseDown}>\r\n        <span>...</span>\r\n      </button>\r\n      <div className=\"rightBlock\">\r\n        <TabViewContainer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport './Main.scss';\r\n\r\nimport Main from './Main';\r\n\r\nconst MainContainer = () => {\r\n  const [startLeftElemWidth, setStartLeftElemWidth] = useState(0);\r\n  const [leftElemWidth, setLeftElemWidth] = useState(0);\r\n  const [oldMouseX, setOldMouseX] = useState(0);\r\n  const [collapseMode, setCollapseMode] = useState(false);\r\n\r\n  const leftElem = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setLeftElemWidth(leftElem.current.offsetWidth);\r\n  }, []);\r\n\r\n  const collapseModeHandler = (collapse = false) => {\r\n    if (!collapse) {\r\n      if (leftElemWidth < 250) {\r\n        setLeftElemWidth(250);\r\n      }\r\n\r\n      setCollapseMode(false);\r\n      return;\r\n    }\r\n\r\n    setCollapseMode(true);\r\n  };\r\n\r\n  const onMouseDown = e => {\r\n    setStartLeftElemWidth(leftElem.current.offsetWidth);\r\n    setOldMouseX(e.pageX);\r\n    setCollapseMode(false);\r\n  };\r\n\r\n  const onMouseUp = () => {\r\n    if (leftElemWidth < 250) {\r\n      collapseModeHandler(true);\r\n    }\r\n    setStartLeftElemWidth(0);\r\n  };\r\n\r\n  const onMouseMove = e => {\r\n    if (!startLeftElemWidth) return;\r\n\r\n    if (leftElemWidth < 250 && oldMouseX > e.pageX) {\r\n      setCollapseMode(true);\r\n    }\r\n\r\n    setLeftElemWidth(startLeftElemWidth - (oldMouseX - e.pageX));\r\n  };\r\n\r\n  return (\r\n    <Main\r\n      leftElemRef={leftElem}\r\n      leftElemWidth={leftElemWidth}\r\n      collapseMode={collapseMode}\r\n      setCollapseMode={collapseModeHandler}\r\n      onMouseDown={onMouseDown}\r\n      onMouseUp={onMouseUp}\r\n      onMouseMove={onMouseMove}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React from 'react';\n\nimport './App.scss';\nimport MainContainer from './components/Main/MainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_ACTIVE_PATIENT, SET_COLLAPSE_MODE, SET_PRESENT_PATIENTS,\r\n        SET_QUITTING_PATIENTS } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  activePatient: null,\r\n  collapseMode: false,\r\n  presentPatients: null,\r\n  quittingPatients: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_PATIENT:\r\n      return {...state,\r\n        activePatient: action.patient\r\n      };\r\n    case SET_COLLAPSE_MODE:\r\n      return {...state,\r\n        collapseMode: action.mode\r\n      };\r\n    case SET_PRESENT_PATIENTS:\r\n      return {...state,\r\n        presentPatients: action.present\r\n      };\r\n    case SET_QUITTING_PATIENTS:\r\n      return {...state,\r\n        quittingPatients: action.quitting\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from \"redux\";\r\n\r\nimport appReducer from \"./appReducer\";\r\n\r\nconst reducers = combineReducers({\r\n  app: appReducer\r\n});\r\n\r\nexport default reducers;","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}